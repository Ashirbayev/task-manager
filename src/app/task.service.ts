import {Injectable} from '@angular/core';

export interface Task {
  id: number;
  title: string;
  text: string;
}


@Injectable({
  providedIn: 'root'
})
export class TaskService {
  private tasks: Task[] = [
    {
      "id": 1,
      "title": "Создание простого CRUD-приложения(Сделанно)",
      "text": "Ваша задача - создать простое веб-приложение для управления списком задач (TODO-лист) с использованием Angular. Приложение должно иметь следующие функции:\n" +
        "\n" +
        "Отображение списка задач:\n" +
        "\n" +
        "Вывести список задач, каждая из которых содержит название и описание.\n" +
        "Реализовать возможность добавления, удаления и редактирования задач.\n" +
        "\n" +
        "Форма добавления задачи:\n" +
        "\n" +
        "Создать форму для добавления новой задачи с полями \"Название\" и \"Описание\".\n" +
        "После добавления задачи, она должна появиться в списке.\n" +
        "\n" +
        "Редактирование задачи:\n" +
        "\n" +
        "Реализовать возможность редактирования задачи, включая изменение названия и описания.\n" +
        "Обновленная задача должна отображаться в списке.\n" +
        "\n" +
        "Удаление задачи:\n" +
        "\n" +
        "Добавить функциональность удаления задачи из списка."
    },
    {
      "id": 2,
      "title": " Реализация компонента для отображения данных в виде графика(Сделанно)",
      "text": "Ваша задача - создать Angular-компонент, который отображает данные в виде графика." +
        "\n" +
        "Подготовка данных:" +
        "\n" +
        "Создайте сервис для загрузки данных. Можете использовать статичные данные или симулировать их получение из API." +
        "Данные должны представлять собой временной ряд (например, данные о ежедневных продажах)." +
        "Компонент графика:"
    },
    {
      "id": 3,
      "title": "Реализуйте механизм для изменения отображаемого временного диапазона(сделанно)",
      "text": "Реализуйте механизм для изменения отображаемого временного диапазона на графике (например, выбор периода \"неделя\", \"месяц\", \"год\")."
    },
    {
      "id": 4,
      "title": "Тестирование и Документация(Не сделанно)",
      "text": "Напишите модульные тесты для вашего компонента." +
        "Создайте документацию, объясняющую, как использовать ваш компонент и какие параметры он поддерживает."
    },
    {
      "id": 5,
      "title": "Компонент должен быть конфигурируемым(Не сделанно)'",
      "text": "Компонент должен быть конфигурируемым и поддерживать различные типы графиков (линейный, столбчатый и т. д.)." +
        "Отображайте данные на графике с подписями осей и легендой."
    },


  ];

  getTask(): Task[] {
    return this.tasks;
  }

  getTaskById(id: number): Task | undefined {
    return this.tasks.find((task) => task.id === id);
  }

  addTask(newTask: Task): void {
    this.tasks.push(newTask);
  }

  editTask(updatedTask: Task): void {
    const index = this.tasks.findIndex((task) => task.id === updatedTask.id);
    if (index !== -1) {
      this.tasks[index] = updatedTask;
    }
  }

}
